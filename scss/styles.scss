@import url('https://fonts.googleapis.com/css2?family=Lobster&display=swap');

$x-rotation: -20deg;
$y-rotation: -40deg;
$base-color: rgb(40,40,40);
$font-color: #6f9ceb;

body {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  background: url(./../images/bg.webp);
  margin: 0;
}

.container{
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100vh;
}

h1{
    font-family: 'Lobster', cursive;
    color: white;
    margin-bottom: 2em;
}

/* CSS */
.button-53 {
  background-color: #3DD1E7;
  border: 0 solid #E5E7EB;
  box-sizing: border-box;
  color: #000000;
  display: flex;
  font-family: ui-sans-serif,system-ui,-apple-system,system-ui,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
  font-size: 1rem;
  font-weight: 700;
  justify-content: center;
  line-height: 1.75rem;
  padding: .75rem 1.65rem;
  position: relative;
  text-align: center;
  text-decoration: none #000000 solid;
  text-decoration-thickness: auto;
  width: 12em;
  margin-top: 4em;
  position: relative;
  cursor: pointer;
  transform: rotate(-2deg);
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.button-53:focus {
  outline: 0;
}

.button-53:after {
  content: '';
  position: absolute;
  border: 1px solid #000000;
  bottom: 4px;
  left: 4px;
  width: calc(100% - 1px);
  height: calc(100% - 1px);
}

.button-53:hover:after {
  bottom: 2px;
  left: 2px;
}

@media (min-width: 768px) {
  .button-53 {
    padding: .75rem 3rem;
    font-size: 1.25rem;
  }
}


.center {
  position: absolute;
  left: 50%;
  top: 50%;
  margin-left: -180px;
  margin-top: -230px;
}

.grid {
  position: relative;
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 280px 100px 20px;
  grid-column-gap: 20px;
  grid-row-gap: 30px;
  border-radius: 10px;

  .dice {
    grid-row: 1;
    grid-column: 1 / -1;
  }

  .y-radio,
  .y-degree,
  .y-arrow {
    grid-row: 2;
    grid-column: 1;
  }

  .z-radio,
  .z-degree,
  .z-arrow {
    grid-row: 2;
    grid-column: 2;
  }

  .x-radio,
  .x-degree,
  .x-arrow {
    grid-row: 2;
    grid-column: 3;
  }

  .radio {
    margin: 0;
    width: 100%;
    height: 100%;
    opacity: 0; // The radio button should be invisible
    z-index: 5; // The radio button must be on top
    cursor: pointer;
  }

  .degree {
    border-radius: 10px;
    color: $font-color;
    font-weight: 900;
    font-size: 1.5em;
    width: 100%;
    height: 100%;
    z-index: 3;
    box-sizing: border-box;
    align-items: center;
    justify-content: center;
  }

  .label {
    text-align: center;
    grid-column: 1 / -1;
  }
}

$axis: "y", "z", "x";

// The buttons use a series of checkboxes on top of each other
// In every case the checkbox leading to the next step is visible

// By default all radio buttons are hidden
.degree,
.radio {
  display: none;
}

// Always show the first radio button in the background
// then show the radio button leading for the next state on top of it

// 0° checkbox checked -> Display the checkbox for 90°
// 90° checkbox checked -> Display the checkbox for 180°
// 180° checkbox checked -> Display the checkbox for 270°
// 270° checkbox checked -> Do not display next checkbox but as the 0° is always in the background that will show
@each $a in $axis {
  .#{$a}-radio[value="1"],
  .#{$a}-radio[value="1"]:checked ~ .#{$a}-radio[value="2"],
  .#{$a}-radio[value="2"]:checked ~ .#{$a}-radio[value="3"],
  .#{$a}-radio[value="3"]:checked ~ .#{$a}-radio[value="4"] {
    display: block;
  }
}

// Show the degree on top of the degree in percentage
@each $a in $axis {
  @for $i from 1 through 4 {
    .#{$a}-radio[value="#{$i}"]:checked ~ .#{$a}-radio:hover ~ ##{$a}#{$i},
    .#{$a}-radio:hover ~ .#{$a}-radio[value="#{$i}"]:checked ~ ##{$a}#{$i} {
      display: flex;
    }
  }
}

// Making the dice look 3D
// The rotation of the dice is at the bottom of CSS
.dice {
  display: flex;
  justify-content: center;
  align-items: center;

  transform-origin: center center;
  transform-style: preserve-3d;
  transition: transform 2s;

  .box {
    transform-style: preserve-3d;

    $size: 150px;

    width: $size;
    height: $size;
    position: relative;

    svg {
      background-color: white;
      border: 2px solid lighten($base-color, 5%);
      fill: darken($base-color, 10%);
      position: absolute;
      border-radius: 10px;

      width: $size;
      height: $size;
    }

    // Put the sides of the dice in place
    .front {
      transform: translateX(-$size / 2) translateZ($size / 2);
    }
    .back {
      transform: translateX(-$size / 2) rotateX(180deg) translateZ($size / 2);
    }
    .right {
      transform: translateX(-$size / 2) rotateY(90deg) translateZ($size / 2);
    }
    .left {
      transform: translateX(-$size / 2) rotateY(-90deg) translateZ($size / 2);
    }
    .top {
      transform: translateX(-$size / 2) rotateX(90deg) translateZ($size / 2);
    }
    .bottom {
      transform: translateX(-$size / 2) rotateX(-90deg) translateZ($size / 2);
    }
  }
}

.arrow {
  position: relative;
  transform-origin: center center;
  transform-style: preserve-3d;
  transition: transform 1s;

  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  width: 100%;

  $radius: 40px;
  $width: 30px; // Width of the tail

  .head {
    position: absolute;
    transform: translateZ($radius);

    // Make a thriangle shape
    // https://css-tricks.com/the-shapes-of-css/
    width: 0;
    height: 0;
    border-left: $width/2 + 10 solid transparent;
    border-right: $width/2 + 10 solid transparent;
    border-bottom: $width/2 + 10 solid $base-color;
  }

  .tail-part {
    position: absolute;
    width: $width;
    height: $radius/5;

    // Make the arrow tail look circular
    @for $i from 2 through 31 {
      &:nth-of-type(#{$i}) {
        // Rotate each by a different angle then translate it by circle radius
        transform: rotateX($i * -10deg) translateZ($radius);
        background-color: lighten($base-color, $i * 1%);
      }
    }
  }
}

// Arrow 1
@for $y from 1 through 4 {
  .y-radio[value="#{$y}"]:checked {
    ~ .y-arrow {
      transform: rotateX($x-rotation)
        rotateY($y-rotation)
        rotateZ(-90deg)
        rotateX(($y - 1) * 90deg);
    }
  }
}

// Arrow 2
@for $y from 1 through 4 {
  .y-radio[value="#{$y}"]:checked {
    @for $z from 1 through 4 {
      ~ .z-radio[value="#{$z}"]:checked {
        ~ .z-arrow {
          transform: rotateX($x-rotation)
            rotateY($y-rotation)
            rotateZ(180deg)
            rotateY(($y - 1) * 90deg - 90deg)
            rotateX(($z - 1) * 90deg);
        }
      }
    }
  }
}

// Arrow 3
@for $y from 1 through 4 {
  .y-radio[value="#{$y}"]:checked {
    @for $z from 1 through 4 {
      ~ .z-radio[value="#{$z}"]:checked {
        @for $x from 1 through 4 {
          ~ .x-radio[value="#{$x}"]:checked {
            ~ .x-arrow {
              transform: rotateX($x-rotation)
                rotateY($y-rotation)
                rotateY(($y - 1) * -90deg)
                rotateZ(($z - 1) * 90deg)
                rotateX(($x - 1) * 90deg);
            }
          }
        }
      }
    }
  }
}

// Rotate the dice
@for $y from 1 through 4 {
  @for $z from 1 through 4 {
    @for $x from 1 through 4 {
      .y-radio[value="#{$y}"]:checked
        ~ .z-radio[value="#{$z}"]:checked
        ~ .x-radio[value="#{$x}"]:checked
        ~ .dice {
        transform: rotateX($x-rotation)
          rotateY($y-rotation)
          rotateY(($y - 1) * -90deg)
          rotateZ(($z - 1) * 90deg)
          rotateX(($x - 1) * 90deg);
      }
    }
  }
}

footer {
  position: absolute;
  bottom: 20px;
  font-size: 0.8em;
  text-align: center;
  width: 100%;

  a:visited {
    color: inherit;
  }
}
